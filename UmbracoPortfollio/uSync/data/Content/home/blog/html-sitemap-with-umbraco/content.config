<?xml version="1.0" encoding="utf-8"?>
<blogPost guid="23706c92-4078-49a1-9367-6fe0a7bcec08" id="1099" nodeName="HTML Sitemap with Umbraco" isDoc="" updated="2016-10-06T23:58:23.5150799Z" parentGUID="445388a5-9c4b-4887-9753-f26fa5781586" nodeTypeAlias="blogPost" templateAlias="BlogPost" sortOrder="0" published="true">
  <pageIntro><![CDATA[HTML sitemaps provide visitors with a great bird's-eye view of the content hosted on your website. I'll explain how to add a quick an easy HTML sitemap to an Umbraco 7 project.]]></pageIntro>
  <pageTitle><![CDATA[Generate a HTML Sitemap with Umbraco]]></pageTitle>
  <pageImage></pageImage>
  <bodyContent><![CDATA[<p>Create a Template and mapping it over in the URL is a quick and easy way of doing this but creating a node specific for the template works too.</p>
<p>We also add the property '<span>hideFromSitemap</span>' this enables to hide any files that we don't really want to index on the sitemap.</p>
<p>This pretty much all you need for the sitemap to work.</p>
<p> </p>]]></bodyContent>
  <header><![CDATA[[
  {
    "name": "Banner",
    "ncContentTypeAlias": "header",
    "title": "Generate a HTML Sitemap with Umbraco",
    "description": "",
    "link": "{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}",
    "image": "13284f8a-699e-4aaa-b511-70734c184761"
  }
]]]></header>
  <metaRobots></metaRobots>
  <openGraphDefaultImage></openGraphDefaultImage>
  <metaKeywords></metaKeywords>
  <metaDescription></metaDescription>
  <openGraphTitle></openGraphTitle>
  <hideFromSitemap>0</hideFromSitemap>
  <openGraphDescription></openGraphDescription>
  <metaTitle></metaTitle>
  <umbracoUrlPreview></umbracoUrlPreview>
  <umbracoUrlAlias></umbracoUrlAlias>
  <markdown><![CDATA[    @inherits Umbraco.Web.Mvc.UmbracoTemplatePage
    @{
        Layout = "Root.cshtml";
        var homePage = CurrentPage.AncestorOrSelf(1);
        var title = Model.Content.GetPropertyValue("pageTitle");
    }
    <section>
        <div class="container">
            <div class="row">
                <div class="col-lg-push-12 text-center">
                    <h2>@title</h2>
                    <hr>
                </div>
                <div class="col-md-12">
                    <div class="post text">
                        <article>
                            @* Render the sitemap by passing the root node to the traverse helper *@
                            <ul class="nav">
                                <li>
                                    <a href="@homePage.Url">@homePage.Name</a>
                                </li>
                                    @Traverse(homePage)
                                
                            </ul>
                        </article>
                    </div>
                </div>
            </div>
            <hr>
        </div>
    </section>
    
    @* Helper method to travers through all descendants *@
    @helper Traverse(IPublishedContent node)
    {
        @* Update the level to reflect how deep you want the sitemap to go *@
        var maxLevelForSitemap = 4;
        @* Select visible children *@
        var items = node.Children
        .Where(x => x.IsVisible())
        .Where(x => !x.GetPropertyValue<bool>("hideFromSitemap"))
        .Where(x => x.Level <= maxLevelForSitemap);
        @* If any items are returned, render a list *@
        if (items.Count() > 0)
        {
            <ul>            
                @foreach (var item in items)
                {
                    <li>
                        <a href="@item.Url">@item.Name</a>
                        @* Run the traverse helper again *@
                        @Traverse(item)
                    </li>
                }
            </ul>
        }
    }]]></markdown>
  <tag><![CDATA[Umbraco,C#,Sitemap,Html]]></tag>
  <createTime>2016-06-10T00:17:59</createTime>
</blogPost>