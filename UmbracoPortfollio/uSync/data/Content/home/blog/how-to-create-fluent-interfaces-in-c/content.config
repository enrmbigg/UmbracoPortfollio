<?xml version="1.0" encoding="utf-8"?>
<blogPost guid="57d2528e-2093-4dd5-8c7f-ed6444993b2a" id="1157" nodeName="How to create Fluent Interfaces in C#" isDoc="" updated="2016-11-23T22:57:22.1171945Z" parentGUID="445388a5-9c4b-4887-9753-f26fa5781586" nodeTypeAlias="blogPost" templateAlias="BlogPost" sortOrder="9" published="true">
  <pageIntro><![CDATA[The concept of Fluent Interface was coined by Martin Fowler to create various objects and wire them up together. This pattern is often used for object configuration and setup.]]></pageIntro>
  <pageTitle><![CDATA[How to create Fluent Interfaces in C#]]></pageTitle>
  <pageImage>d70d390d-39da-413c-85ed-744427d4449f</pageImage>
  <bodyContent><![CDATA[<p>An example of this would be how in jQuery the ability to chain commands together to perform one large operation.</p>
<pre><span class="nx">$</span><span class="p">(</span><span class="s1">'#result'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">'background'</span><span class="p">,</span> <span class="s1">'yellow'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">width</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">height</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">'This is the result'</span><span class="p">);</span></pre>
<p>Another example would in C# currently you have the ability to use linq like so</p>
<pre><span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">PersonDataSource</span>
	<span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Age</span> <span class="p">&gt;</span> <span class="m">20</span><span class="p">)</span>
	<span class="p">.</span><span class="nf">OrderBy</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
	<span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span>
		<span class="n">Name</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span>
		<span class="n">LastName</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">LastName</span>
<span class="p">});</span></pre>
<p><span class="p"><br /><br /><span>You might ask how to implement this pattern, well, it is very simple you just need to return </span>this<span>during method call. The </span>Calculator<span> defined below contains three methods. These methods are returing </span>Calculator<span> object using </span>this<span> keyword, which allow to chain the methods:</span><br /></span></p>
<pre><span class="k">public</span> <span class="k">class</span> <span class="nc">Calculator</span> 
<span class="p">{</span>
	<span class="k">public</span> <span class="kt">int</span> <span class="n">Initial</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
	<span class="k">public</span> <span class="nf">Calculator</span><span class="p">(</span><span class="kt">int</span> <span class="n">intial</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Initial</span> <span class="p">=</span> <span class="n">intial</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">Calculator</span> <span class="nf">Add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Initial</span> <span class="p">=</span> <span class="n">Initial</span> <span class="p">+</span> <span class="n">x</span><span class="p">;</span>
		<span class="k">return</span> <span class="k">this</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">Calculator</span> <span class="nf">Divide</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Initial</span> <span class="p">=</span> <span class="n">Initial</span> <span class="p">/</span> <span class="n">x</span><span class="p">;</span>
		<span class="k">return</span> <span class="k">this</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">Calculator</span> <span class="nf">Substract</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Initial</span> <span class="p">=</span> <span class="n">Initial</span> <span class="p">-</span> <span class="n">x</span><span class="p">;</span>
		<span class="k">return</span> <span class="k">this</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}<br /><br /></span></pre>
<p>Now we can use the class this way:</p>
<pre><span class="kt">var</span> <span class="n">calc</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Calculator</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
			<span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
			<span class="p">.</span><span class="nf">Divide</span><span class="p">(</span><span class="m">5</span><span class="p">)</span>
			<span class="p">.</span><span class="nf">Substract</span><span class="p">(</span><span class="m">2</span><span class="p">);</span>

<span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">calc</span><span class="p">.</span><span class="n">Initial</span><span class="p">);<br /></span></pre>
<p>As you can see this approach makes our code concise and more easier to read.</p>]]></bodyContent>
  <header><![CDATA[[
  {
    "name": "Banner",
    "ncContentTypeAlias": "header",
    "title": "",
    "description": "",
    "link": "{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}",
    "image": "",
    "textColour": ""
  }
]]]></header>
  <metaRobots><![CDATA[index,follow,noodp]]></metaRobots>
  <openGraphDefaultImage></openGraphDefaultImage>
  <metaKeywords><![CDATA[C#, Interfaces]]></metaKeywords>
  <metaDescription><![CDATA[The concept of Fluent Interface was coined by Martin Fowler to create various objects and wire them up together. This pattern is often used for object configuration and setup.]]></metaDescription>
  <openGraphTitle></openGraphTitle>
  <hideFromSitemap>0</hideFromSitemap>
  <openGraphDescription></openGraphDescription>
  <metaTitle><![CDATA[How to create Fluent Interfaces in C#]]></metaTitle>
  <umbracoUrlPreview></umbracoUrlPreview>
  <umbracoUrlAlias></umbracoUrlAlias>
  <markdown></markdown>
  <tag><![CDATA[C#,Interfaces]]></tag>
  <createTime>2016-11-03T23:23:23</createTime>
</blogPost>