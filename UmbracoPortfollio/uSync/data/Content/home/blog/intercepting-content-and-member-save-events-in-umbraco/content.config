<?xml version="1.0" encoding="utf-8"?>
<blogPost guid="e0da2c2d-f6a6-430b-bd1a-bf9cfa26ed33" id="1100" nodeName="Intercepting content and member save events in Umbraco" isDoc="" updated="2016-09-08T00:37:44.3767408Z" parentGUID="445388a5-9c4b-4887-9753-f26fa5781586" nodeTypeAlias="blogPost" templateAlias="BlogPost" sortOrder="2" published="true">
  <pageIntro><![CDATA[In Umbraco, you may want to perform certain actions when a content item or member is being saved or created. This post shows you how to do that.]]></pageIntro>
  <pageTitle><![CDATA[Intercepting Content & Member Save Events In Umbraco]]></pageTitle>
  <pageImage></pageImage>
  <bodyContent><![CDATA[<p>This is pretty useful for most Umbraco projects.</p>
<h3>Prevent creation or editing of content items which have a certain documentTypeAlias</h3>
<pre>using System.Linq;<br />using Umbraco.Core;
using Umbraco.Core.Events;
using Umbraco.Core.Services;
using Umbraco.Core.Models;
using Umbraco.Web;<br />
namespace Test<br />{<br />    public class ContentEventHandler : ApplicationEventHandler<br />    {<br />        protected override void ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)<br />        {<br />            ContentService.Saving += ContentService_Saving;<br />        }<br />
        private void ContentService_Saving(IContentService sender, SaveEventArgs&lt;IContent&gt; e)<br />        {<br />            foreach (IContent contentItem in e.SavedEntities.Where(x =&gt; x.ContentType.Alias == "testDoc"))<br />            {<br />                if (contentItem.Id &lt;= 0)<br />                {<br />                    e.CancelOperation(new EventMessage("Foo permissions", "You cannot create foo items", EventMessageType.Error));<br />                }<br />                else<br />                {<br />                    if (contentItem.IsDirty())<br />                    {<br />                        e.CancelOperation(new EventMessage("Foo permissions", "You cannot edit foo records", EventMessageType.Error));<br />                    }<br />                }<br />            }<br />        }<br />    }<br />}<br /><br />
</pre>
<p>When it finds a new record it cancels the save event and returns an error message</p>
<pre>e.CancelOperation(new EventMessage("permissions", "You cannot create these items", EventMessageType.Error));</pre>
<p>You could instead just cancel the event like this</p>
<pre>e.Cancel = true;</pre>
<h3>Send an email to admin when a content item is saved </h3>
<pre>using System.Linq;<br />using Umbraco.Core;<br />using Umbraco.Core.Events;<br />using Umbraco.Core.Services;<br />using Umbraco.Core.Models;<br />using Umbraco.Web;<br />
namespace Test<br />{<br />    public class ContentEventHandler : ApplicationEventHandler<br />    {<br />        protected override void ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)<br />        {<br />            ContentService.Saved += ContentService_Saved;
        }<br />
        private void ContentService_Saved(IContentService sender, SaveEventArgs&lt;IContent&gt; e)
        {
            foreach (IContent contentItem in e.SavedEntities)
            {
                if (contentItem.ContentType.Alias == "aliasBar")
                {
                    EmailHelper.SendToAdmin(contentItem.Id);
                }
            }
        }
    }
}
</pre>
<h3>Send an email to a member when they are approved</h3>
<pre>using System.Linq;
using Umbraco.Core;
using Umbraco.Core.Events;
using Umbraco.Core.Services;
using Umbraco.Core.Models;
using Umbraco.Web;

namespace Test
{
    public class MemberEventHandler : ApplicationEventHandler<br />    {<br />        protected override void ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)        <br />        {<br />            MemberService.Saving += MemberService_Saving;<br />        }<br />
        private void MemberService_Saving(IMemberService sender, SaveEventArgs&lt;IMember&gt; e)<br />        {<br />            foreach (IMember member in e.SavedEntities)<br />            {<br />                //Check user is approved<br />                if (member.IsApproved &amp;&amp; member.HasProperty("umbracoMemberApproved") &amp;&amp; member.Properties["umbracoMemberApproved"].IsDirty())<br />                {                   </pre>
<pre>                   EmailHelper.SendApprovalEmailToMember(member);<br /><br />                }<br />            }<br />        }<br />    }<br />}</pre>]]></bodyContent>
  <header><![CDATA[[
  {
    "name": "Banner",
    "ncContentTypeAlias": "header",
    "title": "",
    "description": "",
    "link": "{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}"
  }
]]]></header>
  <metaRobots><![CDATA[index,follow,noodp]]></metaRobots>
  <openGraphDefaultImage></openGraphDefaultImage>
  <metaKeywords><![CDATA[C#, Umbraco, Content ]]></metaKeywords>
  <metaDescription></metaDescription>
  <openGraphTitle></openGraphTitle>
  <hideFromSitemap>0</hideFromSitemap>
  <openGraphDescription></openGraphDescription>
  <metaTitle></metaTitle>
  <umbracoUrlPreview></umbracoUrlPreview>
  <umbracoUrlAlias></umbracoUrlAlias>
  <markdown></markdown>
  <tag><![CDATA[C#,Umbraco,Content Service Event]]></tag>
  <createTime>2016-07-06T22:47:01</createTime>
</blogPost>