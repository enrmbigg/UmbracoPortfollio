<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE root [<!ELEMENT sitemap ANY>
<!ATTLIST sitemap id ID #REQUIRED>
<!ELEMENT contact ANY>
<!ATTLIST contact id ID #REQUIRED>
<!ELEMENT blogPost ANY>
<!ATTLIST blogPost id ID #REQUIRED>
<!ELEMENT blogHome ANY>
<!ATTLIST blogHome id ID #REQUIRED>
<!ELEMENT standardPage ANY>
<!ATTLIST standardPage id ID #REQUIRED>
<!ELEMENT home ANY>
<!ATTLIST home id ID #REQUIRED>
<!ELEMENT emailTemplate ANY>
<!ATTLIST emailTemplate id ID #REQUIRED>
<!ELEMENT emailTemplateFolder ANY>
<!ATTLIST emailTemplateFolder id ID #REQUIRED>
<!ELEMENT config ANY>
<!ATTLIST config id ID #REQUIRED>
]>
<root id="-1">
  <home id="1092" key="7680591b-c6ee-4d9f-8832-e90bfe7cec03" parentID="-1" level="1" creatorID="0" sortOrder="0" createDate="2016-08-30T00:00:09" updateDate="2016-09-08T00:41:21" nodeName="Home" urlName="home" path="-1,1092" isDoc="" nodeType="1079" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1066" nodeTypeAlias="home">
    <pageTitle><![CDATA[Home]]></pageTitle>
    <pageImage>1087</pageImage>
    <bodyContent><![CDATA[<p>I am a Computer Technology graduate from the Liverpool John Moores University and I currently work for Uniform as a Junior Web Developer primarly working with Umbraco. I have skills and knowledge in advanced programming concepts, website design and advanced networking. I have also knowledge in basic electronics and embedded systems.</p>
<p>You can <a href="mailto:michael.biggs150@yahoo.co.uk">drop me a line </a> pretty much about anything.</p>]]></bodyContent>
    <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"Hi, I'm Michael Biggs","description":"I like to craft things. \nI heavily code in C#, and do some side projects, look after my many pets, hangout doing alot of other personal interests and sometimes changing the nappy of my little daughter","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"Read My Rambles\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": 1094,\r\n    \"mediaId\": null\r\n  }\r\n}","image":"1116"}]]]></header>
    <metaRobots><![CDATA[index,follow,noodp]]></metaRobots>
    <openGraphDefaultImage>1087</openGraphDefaultImage>
    <metaKeywords><![CDATA[Umbraco, C#, Michael, Biggs, Programming, Liverpool, UK]]></metaKeywords>
    <openGraphTitle><![CDATA[Home]]></openGraphTitle>
    <hideFromSitemap>0</hideFromSitemap>
    <metaTitle><![CDATA[Home]]></metaTitle>
    <umbracoUrlAlias><![CDATA[home]]></umbracoUrlAlias>
    <email><![CDATA[michael.biggs150@yahoo.co.uk]]></email>
    <phoneNumber><![CDATA[+44 7971 235 265]]></phoneNumber>
    <skypeUsername><![CDATA[michael.biggs60]]></skypeUsername>
    <instagram><![CDATA[https://www.instagram.com/biggsy150/]]></instagram>
    <instagramStream><![CDATA[{
  "id": 423004814,
  "username": "biggsy150",
  "name": "Michael Biggs",
  "fullname": "Michael Biggs",
  "avatar": "https://scontent.cdninstagram.com/t51.2885-19/11925875_881921185224607_721899317_a.jpg",
  "accessToken": "423004814.34b02a5.f6ce53b82fd240f6b0c82b0d055ee012"
}]]></instagramStream>
    <twitter><![CDATA[https://twitter.com/Biggsy150]]></twitter>
    <linkedin><![CDATA[https://www.linkedin.com/in/biggsy150]]></linkedin>
    <google><![CDATA[https://plus.google.com/u/0/+MichaelBiggs1/]]></google>
    <twitterStream><![CDATA[{
  "id": 1219368913,
  "screenName": "Biggsy150",
  "name": "Michael Biggs",
  "avatar": "https://pbs.twimg.com/profile_images/378800000011976434/a022b17f4a2630d296c9221db463393f_normal.jpeg",
  "consumerKey": "T50vYoE5PNEPCuOAyId7ZZ4e1",
  "consumerSecret": "rKG5cZ1tztnOfmHceaby7IMiWgkckdu8n6yDjqll2seGYIWYvQ",
  "accessToken": "1219368913-B1d7wuK46xDU7kEbVJl8UHwdeSNnLBVla6kSVEe",
  "accessTokenSecret": "rc8r5jx0frEj8D70FcIHz9g9mMulTS2tIbcppagufJ3bh"
}]]></twitterStream>
    <facebook><![CDATA[https://www.facebook.com/Biggsy150]]></facebook>
    <github><![CDATA[https://github.com/enrmbigg]]></github>
    <faviconAndTouchIcons>1087</faviconAndTouchIcons>
    <analyticsCode><![CDATA[<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-61425310-1', 'auto');
  ga('send', 'pageview');

</script>]]></analyticsCode>
    <contact id="1103" key="a3f2a34c-3b28-49bb-9618-a2f55920db78" parentID="1092" level="2" creatorID="0" sortOrder="0" createDate="2016-08-30T00:00:11" updateDate="2016-09-08T00:19:29" nodeName="Contact" urlName="contact" path="-1,1092,1103" isDoc="" nodeType="1078" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1065" nodeTypeAlias="contact">
      <pageTitle><![CDATA[Why Not Contact Me?]]></pageTitle>
      <metaRobots><![CDATA[index,follow,noodp]]></metaRobots>
      <hideFromSitemap>0</hideFromSitemap>
      <metaTitle><![CDATA[Contact Me]]></metaTitle>
      <umbracoUrlAlias><![CDATA[contactme]]></umbracoUrlAlias>
    </contact>
    <blogHome id="1094" key="445388a5-9c4b-4887-9753-f26fa5781586" parentID="1092" level="2" creatorID="0" sortOrder="1" createDate="2016-08-30T00:00:10" updateDate="2016-10-04T00:22:54" nodeName="Blog" urlName="blog" path="-1,1092,1094" isDoc="" nodeType="1076" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1063" nodeTypeAlias="blogHome">
      <pageTitle><![CDATA[Blog]]></pageTitle>
      <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"Blog","description":"","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}","image":""}]]]></header>
      <metaRobots><![CDATA[index,follow,noodp]]></metaRobots>
      <hideFromSitemap>0</hideFromSitemap>
      <metaTitle><![CDATA[Blog]]></metaTitle>
      <blogPost id="1098" key="e3aa6d1e-d3c0-4611-abf7-48f6063ae463" parentID="1094" level="3" creatorID="0" sortOrder="0" createDate="2016-08-30T00:00:10" updateDate="2016-09-08T23:34:12" nodeName="How To Log Errors In Umbraco" urlName="how-to-log-errors-in-umbraco" path="-1,1092,1094,1098" isDoc="" nodeType="1077" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1064" nodeTypeAlias="blogPost">
        <pageIntro><![CDATA[Error handling and logging tends to be a weakness of mine, so while using Umbraco I was pretty happy to see that they have a built in helper that pretty much handles this all for you.

Its pretty simple to log errors with Umbraco. Just by using the LogHelper class we can log errors to the Umbraco.]]></pageIntro>
        <pageTitle><![CDATA[How To Log Errors In Umbraco]]></pageTitle>
        <bodyContent><![CDATA[<p>The custom error message is logged along with details of the exception to /App_Data/Logs/UmbracoTraceLog.txt. This makes diagnosing site issues where you are unable to step into the code, or finding out the reason for historical errors, a lot easier.</p>]]></bodyContent>
        <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"How To Log Errors In Umbraco","description":"","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}","image":"1115"}]]]></header>
        <metaRobots><![CDATA[index,follow,noodp]]></metaRobots>
        <hideFromSitemap>0</hideFromSitemap>
        <markdown><![CDATA[    try
    
    {
    
     // code that throws exception
    
    }
    
     catch( Exception ex )  
    
    {
    
     LogHelper.>Error(this.GetType(),"Your custom error message here",ex);
    
    }     

    ]]></markdown>
        <tag><![CDATA[C#,Umbraco]]></tag>
        <createTime>2016-06-10T23:36:27</createTime>
      </blogPost>
      <blogPost id="1099" key="23706c92-4078-49a1-9367-6fe0a7bcec08" parentID="1094" level="3" creatorID="0" sortOrder="1" createDate="2016-08-30T00:00:10" updateDate="2016-09-08T00:38:00" nodeName="HTML Sitemap with Umbraco" urlName="html-sitemap-with-umbraco" path="-1,1092,1094,1099" isDoc="" nodeType="1077" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1064" nodeTypeAlias="blogPost">
        <pageIntro><![CDATA[HTML sitemaps provide visitors with a great bird's-eye view of the content hosted on your website. I'll explain how to add a quick an easy HTML sitemap to an Umbraco 7 project.]]></pageIntro>
        <pageTitle><![CDATA[Generate a HTML Sitemap with Umbraco]]></pageTitle>
        <bodyContent><![CDATA[<p>Create a Template and mapping it over in the URL is a quick and easy way of doing this but creating a node specific for the template works too.</p>
<p>We also add the property '<span>hideFromSitemap</span>' this enables to hide any files that we don't really want to index on the sitemap.</p>
<p>This pretty much all you need for the sitemap to work.</p>
<p> </p>]]></bodyContent>
        <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"","description":"","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}"}]]]></header>
        <hideFromSitemap>0</hideFromSitemap>
        <markdown><![CDATA[    @inherits Umbraco.Web.Mvc.UmbracoTemplatePage
    @{
        Layout = "Root.cshtml";
        var homePage = CurrentPage.AncestorOrSelf(1);
        var title = Model.Content.GetPropertyValue("pageTitle");
    }
    <section>
        <div class="container">
            <div class="row">
                <div class="col-lg-push-12 text-center">
                    <h2>@title</h2>
                    <hr>
                </div>
                <div class="col-md-12">
                    <div class="post text">
                        <article>
                            @* Render the sitemap by passing the root node to the traverse helper *@
                            <ul class="nav">
                                <li>
                                    <a href="@homePage.Url">@homePage.Name</a>
                                </li>
                                    @Traverse(homePage)
                                
                            </ul>
                        </article>
                    </div>
                </div>
            </div>
            <hr>
        </div>
    </section>
    
    @* Helper method to travers through all descendants *@
    @helper Traverse(IPublishedContent node)
    {
        @* Update the level to reflect how deep you want the sitemap to go *@
        var maxLevelForSitemap = 4;
        @* Select visible children *@
        var items = node.Children
        .Where(x => x.IsVisible())
        .Where(x => !x.GetPropertyValue<bool>("hideFromSitemap"))
        .Where(x => x.Level <= maxLevelForSitemap);
        @* If any items are returned, render a list *@
        if (items.Count() > 0)
        {
            <ul>            
                @foreach (var item in items)
                {
                    <li>
                        <a href="@item.Url">@item.Name</a>
                        @* Run the traverse helper again *@
                        @Traverse(item)
                    </li>
                }
            </ul>
        }
    }]]></markdown>
        <tag><![CDATA[Umbraco,C#,Sitemap,Html]]></tag>
        <createTime>2016-06-10T00:17:59</createTime>
      </blogPost>
      <blogPost id="1100" key="e0da2c2d-f6a6-430b-bd1a-bf9cfa26ed33" parentID="1094" level="3" creatorID="0" sortOrder="2" createDate="2016-08-30T00:00:11" updateDate="2016-09-08T00:37:44" nodeName="Intercepting content and member save events in Umbraco" urlName="intercepting-content-and-member-save-events-in-umbraco" path="-1,1092,1094,1100" isDoc="" nodeType="1077" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1064" nodeTypeAlias="blogPost">
        <pageIntro><![CDATA[In Umbraco, you may want to perform certain actions when a content item or member is being saved or created. This post shows you how to do that.]]></pageIntro>
        <pageTitle><![CDATA[Intercepting Content & Member Save Events In Umbraco]]></pageTitle>
        <bodyContent><![CDATA[<p>This is pretty useful for most Umbraco projects.</p>
<h3>Prevent creation or editing of content items which have a certain documentTypeAlias</h3>
<pre>using System.Linq;<br />using Umbraco.Core;
using Umbraco.Core.Events;
using Umbraco.Core.Services;
using Umbraco.Core.Models;
using Umbraco.Web;<br />
namespace Test<br />{<br />    public class ContentEventHandler : ApplicationEventHandler<br />    {<br />        protected override void ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)<br />        {<br />            ContentService.Saving += ContentService_Saving;<br />        }<br />
        private void ContentService_Saving(IContentService sender, SaveEventArgs&lt;IContent&gt; e)<br />        {<br />            foreach (IContent contentItem in e.SavedEntities.Where(x =&gt; x.ContentType.Alias == "testDoc"))<br />            {<br />                if (contentItem.Id &lt;= 0)<br />                {<br />                    e.CancelOperation(new EventMessage("Foo permissions", "You cannot create foo items", EventMessageType.Error));<br />                }<br />                else<br />                {<br />                    if (contentItem.IsDirty())<br />                    {<br />                        e.CancelOperation(new EventMessage("Foo permissions", "You cannot edit foo records", EventMessageType.Error));<br />                    }<br />                }<br />            }<br />        }<br />    }<br />}<br /><br />
</pre>
<p>When it finds a new record it cancels the save event and returns an error message</p>
<pre>e.CancelOperation(new EventMessage("permissions", "You cannot create these items", EventMessageType.Error));</pre>
<p>You could instead just cancel the event like this</p>
<pre>e.Cancel = true;</pre>
<h3>Send an email to admin when a content item is saved </h3>
<pre>using System.Linq;<br />using Umbraco.Core;<br />using Umbraco.Core.Events;<br />using Umbraco.Core.Services;<br />using Umbraco.Core.Models;<br />using Umbraco.Web;<br />
namespace Test<br />{<br />    public class ContentEventHandler : ApplicationEventHandler<br />    {<br />        protected override void ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)<br />        {<br />            ContentService.Saved += ContentService_Saved;
        }<br />
        private void ContentService_Saved(IContentService sender, SaveEventArgs&lt;IContent&gt; e)
        {
            foreach (IContent contentItem in e.SavedEntities)
            {
                if (contentItem.ContentType.Alias == "aliasBar")
                {
                    EmailHelper.SendToAdmin(contentItem.Id);
                }
            }
        }
    }
}
</pre>
<h3>Send an email to a member when they are approved</h3>
<pre>using System.Linq;
using Umbraco.Core;
using Umbraco.Core.Events;
using Umbraco.Core.Services;
using Umbraco.Core.Models;
using Umbraco.Web;

namespace Test
{
    public class MemberEventHandler : ApplicationEventHandler<br />    {<br />        protected override void ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)        <br />        {<br />            MemberService.Saving += MemberService_Saving;<br />        }<br />
        private void MemberService_Saving(IMemberService sender, SaveEventArgs&lt;IMember&gt; e)<br />        {<br />            foreach (IMember member in e.SavedEntities)<br />            {<br />                //Check user is approved<br />                if (member.IsApproved &amp;&amp; member.HasProperty("umbracoMemberApproved") &amp;&amp; member.Properties["umbracoMemberApproved"].IsDirty())<br />                {                   </pre>
<pre>                   EmailHelper.SendApprovalEmailToMember(member);<br /><br />                }<br />            }<br />        }<br />    }<br />}</pre>]]></bodyContent>
        <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"","description":"","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}"}]]]></header>
        <metaRobots><![CDATA[index,follow,noodp]]></metaRobots>
        <metaKeywords><![CDATA[C#, Umbraco, Content ]]></metaKeywords>
        <hideFromSitemap>0</hideFromSitemap>
        <tag><![CDATA[C#,Umbraco,Content Service Event]]></tag>
        <createTime>2016-07-06T22:47:01</createTime>
      </blogPost>
      <blogPost id="1095" key="219edb32-44c3-491c-ae4e-8bb27a740a15" parentID="1094" level="3" creatorID="0" sortOrder="3" createDate="2016-08-30T00:00:10" updateDate="2016-09-08T00:37:25" nodeName="C# Generic Session Helper" urlName="c-generic-session-helper" path="-1,1092,1094,1095" isDoc="" nodeType="1077" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1064" nodeTypeAlias="blogPost">
        <pageIntro><![CDATA[Typing something to a session has always been a pain for me, I came across the idea for a session helper from "Stack Overflow"  and decided to try and implement my own.]]></pageIntro>
        <pageTitle><![CDATA[C# Generic Session Helper]]></pageTitle>
        <bodyContent><![CDATA[<p class="tags">This is my simple helper class which uses generics to retrieve the correctly typed object from session, removing the need for you to cast anything in our calling code. It also has methods to set and remove values from the session.</p>
<pre> public class SessionHelper
 {
    public static T Get(string key)
    {
        var sessionValue = HttpContext.Current.Session[key];
        if (sessionValue is T)
        {
            return (T) sessionValue;
        }
        return default(T);
    }

    public static void Set(string key, object value)
    {
        HttpContext.Current.Session[key] = value;
    }

    public static void Remove(string key)
    {
        HttpContext.Current.Session.Remove(key);
    }
 }
</pre>
<p>For example. We call the Get method like so:</p>
<pre>var foo = SessionHelper.Get("sessionKey");</pre>
<p>Where 'Foo' is the object type we want to cast to. If there is no value found in session, a default value for that type is returned.</p>]]></bodyContent>
        <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"","description":"","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}"}]]]></header>
        <metaRobots><![CDATA[index,follow,noodp]]></metaRobots>
        <metaKeywords><![CDATA[C#, Generic, Session]]></metaKeywords>
        <hideFromSitemap>0</hideFromSitemap>
        <tag><![CDATA[C#,Generics,Session]]></tag>
        <createTime>2016-07-13T23:13:05</createTime>
      </blogPost>
      <blogPost id="1097" key="9cad67d6-3eb3-4e20-9e15-c2f50b1c8cba" parentID="1094" level="3" creatorID="0" sortOrder="4" createDate="2016-08-30T00:00:10" updateDate="2016-09-08T00:37:11" nodeName="How To Display Umbraco Tags On Razor Templates" urlName="how-to-display-umbraco-tags-on-razor-templates" path="-1,1092,1094,1097" isDoc="" nodeType="1077" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1064" nodeTypeAlias="blogPost">
        <pageIntro><![CDATA[Umbraco has a already built-in tag data type that allows users to easily apply a list of tags to a document. But once you’ve added a tag property to a document type, how do you display the tag list in a Razor view? Well that's a very good question, I'll show you how.]]></pageIntro>
        <pageTitle><![CDATA[How To Display Umbraco Tags On Razor Templates]]></pageTitle>
        <bodyContent><![CDATA[<p> </p>
<p>In the Umbraco back office, select Settings on the main menu and, in the Partial Views folder, create a new Partial View I've named mine '<span class="keystroke">Tags' (Original, I know!)</span>.</p>
<p>In your new partial, use the code below which grabs the tags assigned to a node and display them. </p>
<pre>@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@if (Model.Content.HasValue("articleTags"))
{
    var tagList = Umbraco.Field("articleTags").ToHtmlString().Split(',');

    &lt;div class="title-panel"&gt;
        &lt;h3&gt;
            Tags
        &lt;/h3&gt;
    &lt;/div&gt;
    &lt;div class="latest-updates"&gt;
        &lt;div&gt;
            &lt;ul class="fa-ul"&gt;
                @foreach (var tag in tagList)
                {
                    &lt;li&gt;
                        &lt;i class="fa-li fa fa-tag"&gt;&lt;/i&gt;
                        &lt;a href="/tags?tag=@tag" title="Get content tagged with @tag"&gt;
                            @tag
                        &lt;/a&gt;
                    &lt;/li&gt;
                }
            &lt;/ul&gt;
        &lt;/div&gt;

        &lt;div&gt;
            &lt;ul class="fa-ul"&gt;
                &lt;li&gt;
                    &lt;i class="fa-li fa fa-tags"&gt;&lt;/i&gt;
                    &lt;a href="/tags" title="View tagged content"&gt;
                        Browse tags
                    &lt;/a&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;/div&gt;
}
</pre>
<p>Then all you need to do is render the partial in your template, In my example I have used the CachedPartial method to render the partial view an have it caching for one day. </p>
<pre>@Html.CachedPartial("ContentItemTags", Model.Content, 86400000, cacheByPage: true)</pre>]]></bodyContent>
        <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"","description":"","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}"}]]]></header>
        <metaKeywords><![CDATA[Umbraco, Tags, Razor]]></metaKeywords>
        <hideFromSitemap>0</hideFromSitemap>
        <umbracoUrlAlias><![CDATA[Umbraco]]></umbracoUrlAlias>
        <tag><![CDATA[Umbraco,Tags,Razor]]></tag>
        <createTime>2016-07-20T23:28:41</createTime>
      </blogPost>
      <blogPost id="1096" key="1bfa30cc-a457-48d4-aa34-46c1af424abd" parentID="1094" level="3" creatorID="0" sortOrder="5" createDate="2016-08-30T00:00:10" updateDate="2016-09-08T00:36:54" nodeName="Get Umbraco content by tag" urlName="get-umbraco-content-by-tag" path="-1,1092,1094,1096" isDoc="" nodeType="1077" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1064" nodeTypeAlias="blogPost">
        <pageIntro><![CDATA[The other day I explored how I would go about displaying the Umbraco tag data on a site, but a common scenario is what if you want to get all content that matches a given tag? Well let me show you how to implement this so the anchor tags from the last post show you post linked to that given tag.]]></pageIntro>
        <pageTitle><![CDATA[Get Umbraco Content By Tag]]></pageTitle>
        <bodyContent><![CDATA[<p>So in the Umbraco back office, create a new partial view. Once again am going to come up with such a great original name like '<span class="keystroke">TagList'</span>. So the plan is that in this partial we’ll grab all tags associated with our content and display them on the page. This view will appear whenever visitors navigate to our template without searching for a tag or when content matching a tag search is not found.</p>
<pre>@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
    var tagList = Umbraco.TagQuery.GetAllContentTags()
        .OrderBy(t =&gt; t.Text);
}

&lt;ul class="small-block-grid-1 medium-block-grid-3 large-block-grid-4"&gt;
    @foreach (var tag in tagList)
    {
        &lt;li&gt;
            &lt;a href="/tags?tag=@tag.Text"&gt;
                @tag.Text (@tag.NodeCount)
            &lt;/a&gt;
        &lt;/li&gt;
    }
&lt;/ul&gt;
</pre>
<p>Next, in the Settings view, create another partial view named <span class="keystroke">TagContentList</span>. In this partial we grab the tag parameter from the URL’s query string and search for matching content. When Umbraco finds matching content, it will display the <span class="keystroke">headline</span> property along with its create date and a link to the content.</p>
<p>The <span class="keystroke">headline</span> property is a required property I defined in a master document type to apply to all child documents. You will need to change this property name to a property that exists on your tagged documents if you haven’t implemented the <span class="keystroke">headline</span> property.</p>
<pre>@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
    string tag = Request.QueryString["tag"];

    if (!tag.IsNullOrWhiteSpace())
    {
        var publishedContent = Umbraco.TagQuery.GetContentByTag(tag);

        if (publishedContent.Count() &gt; 0)
        {
            foreach (var item in publishedContent
                .OrderByDescending(i =&gt; i.CreateDate))
            {
                &lt;div class="row"&gt;
                    &lt;div class="large-8 large-centered columns"&gt;
                        &lt;section class="text-center"&gt;
                            &lt;a href="@item.Url"&gt;
                                &lt;h2&gt;
                                    @item.GetPropertyValue("Headline")
                                &lt;/h2&gt;
                            &lt;/a&gt;
                            &lt;span&gt;
                                @item.CreateDate
                            &lt;/span&gt;
                        &lt;/section&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            }
        }
        else
        {
            &lt;div class="row"&gt;
                &lt;div class="small-12 columns"&gt;
                    &lt;p&gt;
                        There isn't any content matching that tag.
                    &lt;/p&gt;
                &lt;/div&gt;
            &lt;/div&gt;

            @Html.CachedPartial("TagList", Model.Content, 86400000)
        }
    }
    else
    {
    @Html.CachedPartial("TagList", Model.Content, 86400000)
    }
}
</pre>
<p>Finally, we need to add a template to display the partial views we created above. In Settings, add a new template named <span class="keystroke">Tags</span>.</p>
<pre>@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = "_Layout.cshtml";
}

&lt;header&gt;
    &lt;div class="row"&gt;
        &lt;div class="large-12 columns"&gt;
            &lt;h1&gt;
                Tags
            &lt;/h1&gt;
            &lt;h3&gt;Browse content by tag&lt;/h3&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/header&gt;

&lt;div class="row"&gt;
    &lt;div class="large-12 columns"&gt;
        &lt;section class="page-container"&gt;
            @Html.Partial("TagContentList", Model.Content)
        &lt;/section&gt;
    &lt;/div&gt;
&lt;/div&gt;
</pre>]]></bodyContent>
        <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"","description":"","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}"}]]]></header>
        <metaRobots><![CDATA[index,follow,noodp]]></metaRobots>
        <metaKeywords><![CDATA[Umbraco, Tag, Content]]></metaKeywords>
        <hideFromSitemap>0</hideFromSitemap>
        <tag><![CDATA[Umbraco,Tags,Content]]></tag>
        <createTime>2016-07-23T13:43:26</createTime>
      </blogPost>
      <blogPost id="1101" key="eef94c67-a9b3-426d-b036-062ee6f109bb" parentID="1094" level="3" creatorID="0" sortOrder="6" createDate="2016-08-30T00:00:11" updateDate="2016-10-04T23:17:46" nodeName="My First CodeGarden" urlName="my-first-codegarden" path="-1,1092,1094,1101" isDoc="" nodeType="1077" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1064" nodeTypeAlias="blogPost">
        <pageIntro><![CDATA[I attended My first CodeGarden this year in Odense, Denmark.  being a newbie to CodeGarden I didn’t really know what to expect.
 
It wasn’t what I have come to expect from other tech events and now being back home I can appreciate just how good it was !

I ended up learning lots of advanced technical stuff but also improved some more of “soft skills” such as confidence and just striking up a  conversation with someone unknown to me. I just wanted to talk about the key themes of the conference]]></pageIntro>
        <pageTitle><![CDATA[My First CodeGarden]]></pageTitle>
        <pageImage>1140</pageImage>
        <bodyContent><![CDATA[<p><strong>Personalisation</strong></p>
<p><span>I heard a lot about how personalisation is something that we should ensure is at least considered at the start of a project and throughout. We also heard how it is important to have a benchmark of what metrics (e.g conversion) we are trying to improve before implementing personalisation.</span></p>
<p><span>The next session was on how to implement personalisation within Umbraco and focused on the package written by the speaker Andy Butland. personalisation groups</span><span> allows us to set personalised content for time of day, session, cookies set, pages viewed, etc. It can also be extended for custom personalisation criteria. I haven't had a chance of trying out either Personalisation Groups and Spindoctor </span><span>but now I have heard more about it, I am keen to look into this some more. As part of this talk Theo</span><span> discussed PipelineCRM where a single user view can be held in Umbraco and used for personalisation.</span></p>
<p><strong>The Future</strong></p>
<p><span>In the keynote <a href="https://umbraco.com/follow-us/blog-archive/2016/6/15/umbraco-75-beta-out-now/">7.5.0 beta</a> was announced.</span><span> with some popular packages now being included in core Umbraco: Health check dashboard and 301 redirects included now as well a f</span><span>orgotten password functionality. I downloaded it while in Odense and these new features look pretty cool but I will need to have a proper play with it now I am home.</span></p>
<p><span>In a similar note, we heard that the Nested Content package is being added to core Umbraco soon (7.6, if I understood properly).</span></p>
<p><span>There was a lot of chat about Umbraco 8. We even got a little sneak peak! I liked the new content variants that can be edited side by side and that it supports segments too, it looks like this version will make multi language and personalisation easier for us devs.</span></p>
<p><span>A major change to how the caching works in Umbraco 8 was announced: Nu cache. If you can catch the video of the keynote, this will explain it way better than I could but the main point I got from this was “bye bye umbraco.config XML file!”.</span></p>
<p><span>Shannon Deminick</span><span> also gave an in depth detail of the major refactoring of Umbraco core in the next versions and longer term in Umbraco 8. Cutting unnecessary code and dependencies means easier to read and maintain code = happy developers :)</span></p>
<p><span>Another interesting session <span>from </span>Simone Chiaretta was an insight into how we will be building webapps in the not too distant future: .Net Core</span><span>. This was good to see a app built from scratch and what needs to be considered when working with ASP .Net Core. It doesn’t seem too bad, mostly the same concepts as before, just structured differently. This can already be done in VS2015 alreday, so have a play!</span><br /><br /></p>
<p><strong>Performance</strong></p>
<p><span>As devs we sometimes get the 'site seems a bit slow' feedback. Often optmisations can be made but other times, it’s just due to the services being called or calculations. This is where "Perceived Performance" comes in, this talk by Rasmus Lynggaard</span><span> was interesting because it discussed the psychology of waiting for a user. Actual time spent waiting for something to happen differs from the perceived time for a user. I found it facinating that a spinner going one way rather than the other can make someone think load time is longer?!</span></p>
<p><span>So basically, if we have done all the minifications and optimisations we can, we should think about how to let the user know something is happening using spinners/ loading screens or limit their wait time using partially rendered pages like skeleton screens that is then populated with data once available (Facebook uses this technique).</span></p>
<p><strong>Uaas</strong></p>
<p><span>There were many talks on Umbraco as a Service including migrating existing Umbraco sites to UAAS and how to set up a site in UAAS. </span><span>To be honest, I haven’t had a chance to use this yet! But as was announced at CG16 there is a lower price, which makes it a bit more realistic for migrating a personal site to Uaas.</span></p>
<p> </p>
<p><strong>Community</strong></p>
<p><span>When I hear people talking about tech "communities" I usually roll my eyes and find it a bit cheesy… but now having seen the Umbraco community first hand, I see what they mean.</span></p>
<p><span>Everyone was so welcoming and encouraging, from the early starts with the running club to the famous bingo and after parties.  There are many Codegarden veterans who took time out from catching up with each other to make an effort to include us newbies. For example, taking time to come along to a “Contributing to newbies” open sessions to share their experiences.</span></p>
<p> </p>
<p> </p>]]></bodyContent>
        <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"","description":"","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}","image":""}]]]></header>
        <hideFromSitemap>0</hideFromSitemap>
        <tag><![CDATA[Umbraco,CodeGarden]]></tag>
        <createTime>2016-07-08T00:33:51</createTime>
      </blogPost>
      <blogPost id="1102" key="062d14df-5112-45d5-83bc-a3cb1050f8e8" parentID="1094" level="3" creatorID="0" sortOrder="7" createDate="2016-08-30T00:00:11" updateDate="2016-10-04T00:26:31" nodeName="What I Learned at CodeGarden 2016" urlName="what-i-learned-at-codegarden-2016" path="-1,1092,1094,1102" isDoc="" nodeType="1077" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1064" nodeTypeAlias="blogPost">
        <pageIntro><![CDATA[So this is one of those boring post where I try to tell you about what I have learned! Yawn....]]></pageIntro>
        <pageTitle><![CDATA[What I Learned at CodeGarden 2016]]></pageTitle>
        <pageImage>1085</pageImage>
        <bodyContent><![CDATA[<p>Well, its been well over a month since  I got back from CodeGarden, the "infamous" yearly Umbraco developer conference in Denmark.</p>
<p>It was as every bit <em>awesome as it sounds</em>.</p>
<p>I've been using Umbraco now for around a year. I've chosen it and had to use it for the rebuild of some of our biggest websites and clients.</p>
<p>So you could say I have been heavily invested in Umbraco - but there's still some big question marks in my head about it's best practises and how should will fit into the workflow of my team as we continue to build projects with it.</p>
<p>There was one big question that alway came between our team when discussing our work flow so it's was my job for Code Garden </p>
<ul>
<li>
<p><strong>How would Umbraco fit into our current CI/deployment workflow? </strong>So from a chat I had towards the end of CodeGarden seems most people do a mixture of two things; Create packages to upload the changes they have made or Use USync which is a package made by Kevin Jump which writes your Umbraco content to disk giving you something to move between environments</p>
</li>
</ul>
<p>It was a good feeling to find alot of people that suffer from the same pain we do trying to find the best solution to the age old questions  - but usually its that we're just too stupid to figure it out whats right in front of us.</p>]]></bodyContent>
        <header><![CDATA[[{"name":"Banner","ncContentTypeAlias":"header","title":"What I Learned at CodeGarden 2016","description":"","link":"{\r\n  \"type\": \"content\",\r\n  \"meta\": {\r\n    \"title\": \"\",\r\n    \"newWindow\": false\r\n  },\r\n  \"typeData\": {\r\n    \"url\": \"\",\r\n    \"contentId\": null,\r\n    \"mediaId\": null\r\n  }\r\n}","image":"1139"}]]]></header>
        <hideFromSitemap>0</hideFromSitemap>
        <tag><![CDATA[Umbraco,CodeGarden]]></tag>
        <createTime>2016-07-12T00:34:07</createTime>
      </blogPost>
    </blogHome>
    <standardPage id="1093" key="f941cda9-8ee7-4451-8fac-a6d358e70bf6" parentID="1092" level="2" creatorID="0" sortOrder="2" createDate="2016-08-30T00:00:10" updateDate="2016-09-08T00:19:27" nodeName="404" urlName="404" path="-1,1092,1093" isDoc="" nodeType="1081" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1068" nodeTypeAlias="standardPage">
      <pageIntro><![CDATA[The page you are looking for doesn't exist please try a different url]]></pageIntro>
      <pageTitle><![CDATA[404 - Page Not Found]]></pageTitle>
      <hideFromSitemap>1</hideFromSitemap>
    </standardPage>
    <sitemap id="1104" key="b017566a-f4b9-4d7f-abec-00cc8c46e097" parentID="1092" level="2" creatorID="0" sortOrder="3" createDate="2016-08-30T00:00:11" updateDate="2016-09-08T00:19:29" nodeName="Sitemap" urlName="sitemap" path="-1,1092,1104" isDoc="" nodeType="1080" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="1067" nodeTypeAlias="sitemap">
      <pageTitle><![CDATA[Sitemap]]></pageTitle>
      <metaKeywords><![CDATA[Sitemap]]></metaKeywords>
      <hideFromSitemap>1</hideFromSitemap>
      <metaTitle><![CDATA[Sitemap]]></metaTitle>
    </sitemap>
  </home>
  <config id="1089" key="3185828f-349b-4d57-be3e-5832792fa485" parentID="-1" level="1" creatorID="0" sortOrder="1" createDate="2016-08-30T00:00:09" updateDate="2016-09-08T00:19:27" nodeName="Config Folder" urlName="config-folder" path="-1,1089" isDoc="" nodeType="1071" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="0" nodeTypeAlias="config">
    <emailTemplateFolder id="1090" key="aad753cd-41f6-4290-a925-7e404f6960eb" parentID="1089" level="2" creatorID="0" sortOrder="2" createDate="2016-08-30T00:00:09" updateDate="2016-09-08T00:19:27" nodeName="Email Templates" urlName="email-templates" path="-1,1089,1090" isDoc="" nodeType="1073" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="0" nodeTypeAlias="emailTemplateFolder">
      <emailTemplate id="1091" key="3f06e37c-2a14-4b52-aedd-c65e1454bd41" parentID="1090" level="3" creatorID="0" sortOrder="1" createDate="2016-08-30T00:00:09" updateDate="2016-09-08T00:19:27" nodeName="Contact Form" urlName="contact-form" path="-1,1089,1090,1091" isDoc="" nodeType="1072" creatorName="Michael Biggs" writerName="Michael Biggs" writerID="0" template="0" nodeTypeAlias="emailTemplate">
        <emailTo><![CDATA[Mikeylfc007@blueyonder.co.uk]]></emailTo>
        <emailSubject><![CDATA[Contact]]></emailSubject>
        <emailBody><![CDATA[Name: {Name}
Email: {Email}
Comment: {Comment}]]></emailBody>
      </emailTemplate>
    </emailTemplateFolder>
  </config>
</root>